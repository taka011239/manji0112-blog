The Go Memory Modelを翻訳した
24 Jun 2014
Tags: go, golang, 翻訳

Takafumi Tsuchida
@manji0112

* The Go Memory Model?

goroutine間で変数を読み書きするときの一貫性を保証する条件について記載された公式Docです。

.link http://golang.org/ref/mem

* どんなことが書いてある?

例えば、goroutine間の誤った同期の例なんかが記載されています。

下記は、goroutine間での変数の読み書きが同期されていない例です。

.code ./20140624/incorrect.go

実行したときに、"20"という出力が起こり得ます。

これは、a,bへの書き込み順はgoroutine内では処理順が保たれているのですが、

他のgoroutineから見たときには、bの値が更新されているからといってaも更新されているとは限らないということです。

まあ、goroutine間で変数の読み書きするときは、channelなりLockなり同期メカニズムを使いましょうという当然の話です。

下記は、channelで同期をとるように修正したものです。

.code ./20140624/correct.go

他にも割りと当然の話が書いてあるのですが、厳密に条件化されているので一度目を通しておくといいかなと思います。

* channelのbuffer有無での挙動の違い

これは知らなかったのですが、buffer有無で送信と受信の優先順位が変わります。

詳しくは、Gistを見て下さい。

.link https://gist.github.com/taka011239/b0d8fb6bc2a87842a18e

こういったこともあるので、やはり公式ドキュメントは一通り目を通しておかねばと思いました。

* 最後に

日本語訳は下記に上がっています。

.link http://golang-jp.org/ref/mem

現時点(2014/06/25 06:40)では更新されていませんが、そのうち更新されると思います。

